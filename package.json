{
	"name": "fake-response-server",
	"displayName": "Fake Response Server",
	"description": "Simple extension helps to generate local mock server",
	"version": "0.0.1",
	"icon": "images/fr.png",
	"publisher": "Thinker",
	"author": {
		"name": "Sivaraman",
		"email": "sendmsg2siva@gmail.com"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/R35007/fake-response-server"
	},
	"keywords": [
		"JSON",
		"REST",
		"API",
		"prototyping",
		"mock",
		"mocking",
		"test",
		"testing",
		"rest",
		"data",
		"dummy",
		"sandbox",
		"server",
		"fake",
		"response",
		"db",
		"local"
	],
	"engines": {
		"vscode": "^1.50.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onCommand:fakeResponse.generateMock",
		"onCommand:fakeResponse.filterBySchema",
		"onCommand:fakeResponse.startServer",
		"onCommand:fakeResponse.reStartServer",
		"onCommand:fakeResponse.stopServer",
		"onCommand:fakeResponse.getRoutesList"
	],
	"main": "./out/extension.js",
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "Fake Response",
			"properties": {
				"fakeResponse.saveAsNewFile": {
					"type": "boolean",
					"default": false,
					"description": "On Action save the data as a new file."
				},
				"fakeResponse.filterSchema": {
					"type": "object",
					"description": "Provide schema to filter object properties"
				},
				"fakeResponse.mockPath": {
					"type": "string",
					"description": "Mock Path to generate local mock server"
				},
				"fakeResponse.injectorsPath": {
					"type": "string",
					"description": "Provide the Injectors .js path. Note: the js file must have an default module export of the injectors list."
				},
				"fakeResponse.globals": {
					"type": "object",
					"description": "Provide any initial values before starting the server"
				},
				"fakeResponse.config.port": {
					"type": "integer",
					"default": 3000,
					"description": "Port to generate local mock server"
				},
				"fakeResponse.config.rootPath": {
					"type": "string",
					"default": "./",
					"description": "Provide the rootPath. The mock path will be relative to this path"
				},
				"fakeResponse.config.baseUrl": {
					"type": "string",
					"description": "Provide Base Mock URL"
				},
				"fakeResponse.config.env": {
					"type": "string",
					"description": "Provide Mock Environment"
				},
				"fakeResponse.config.groupings": {
					"type": "object",
					"description": "Provide URL mapping for Grouping Routes"
				},
				"fakeResponse.config.proxy": {
					"type": "object",
					"default": {
						"exactMatch": {},
						"patternMatch": {}
					}
				},
				"fakeResponse.config.excludeRoutes.patternMatch": {
					"type": "array",
					"markdownDescription": "Provide list of routes to exclude form generate local server that matches this pattern",
					"items": {
						"type": "string"
					},
					"uniqueItems": true,
					"scope": "window"
				},
				"fakeResponse.config.excludeRoutes.exactMatch": {
					"type": "array",
					"markdownDescription": "Provide list of routes to exclude form generate local server that matches this route",
					"items": {
						"type": "string"
					},
					"uniqueItems": true,
					"scope": "window"
				},
				"fakeResponse.config.delay.time": {
					"type": "integer",
					"description": "Provide a common delay in milliseconds"
				},
				"fakeResponse.config.delay.excludeRoutes.patternMatch": {
					"type": "array",
					"markdownDescription": "Provide list of routes to exclude for delay that matches this pattern",
					"items": {
						"type": "string"
					},
					"uniqueItems": true,
					"scope": "window"
				},
				"fakeResponse.config.delay.excludeRoutes.exactMatch": {
					"type": "array",
					"markdownDescription": "Provide list of routes to exclude for delay that matches this route",
					"items": {
						"type": "string"
					},
					"uniqueItems": true,
					"scope": "window"
				}
			}
		},
		"commands": [
			{
				"command": "fakeResponse.generateMock",
				"title": "FakeResponse : Generate Mock"
			},
			{
				"command": "fakeResponse.filterBySchema",
				"title": "FakeResponse : Filter By Schema"
			},
			{
				"command": "fakeResponse.startServer",
				"title": "FakeResponse : Start Server"
			},
			{
				"command": "fakeResponse.reStartServer",
				"title": "FakeResponse : Restart Server"
			},
			{
				"command": "fakeResponse.stopServer",
				"title": "FakeResponse : Stop Server"
			},
			{
				"command": "fakeResponse.getRoutesList",
				"title": "FakeResponse : Get Generated Routes List"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"lint": "eslint src --ext ts",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/vscode": "^1.50.0",
		"@types/glob": "^7.1.3",
		"@types/mocha": "^8.0.0",
		"@types/node": "^12.11.7",
		"eslint": "^7.9.0",
		"@typescript-eslint/eslint-plugin": "^4.1.1",
		"@typescript-eslint/parser": "^4.1.1",
		"glob": "^7.1.6",
		"mocha": "^8.1.3",
		"typescript": "^4.0.2",
		"vscode-test": "^1.4.0"
	},
	"dependencies": {
		"@types/express": "^4.17.8",
		"fake-response": "^5.1.7"
	}
}